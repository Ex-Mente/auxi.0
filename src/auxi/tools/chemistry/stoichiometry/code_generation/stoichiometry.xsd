<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="stoichiometry"
    targetNamespace="auxi::tools::chemistry"
    elementFormDefault="qualified"
    xmlns="chemistry"
    xmlns:mstns="auxi::tools::chemistry"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
>
<xs:element name="auxi.tools.chemistry.Stoichiometry" type="Stoichiometry"/>

<xs:complexType name="Stoichiometry" isNamespace="true" additional_includes="Element" doc="This module provides a number of functions for doing stoichiometry calculations." >
<function name="formula_code" returnType="std::string" private="true" doc="Generate a unique formula code for a chemical compound."  doc_return="The formula code for the chemical compound.">
    <param name="formula" type="std::string" default="" doc="The formula describing the chemical compound." />
</function>
<function name="get_character" returnType="std::tuple&lt;char, int, int&gt;" private="true" doc="Returns the character from a string at the index position, the integer ordinal of the character, and an incremented index.\\n\\nIf index is at the end of the string, return an empty string, -1 for the ordinal, and return index unchanged." doc_return="A tuple of: character at string[index]; ordinal of character; incremented index ">
    <param name="char_string" type="std::string" doc="String to search." />
    <param name="index" type="int" default="0" doc="Index at which the character should be located." />
</function>
<function name="get_formula" returnType="std::string" private="true" doc="Remove the phase from a compound string if it exists and return only the formula." doc_return="Chemical formula.">
    <param name="compound" type="std::string" doc="Formula and phase of a chemical compound, e.g. &quot;Fe2O3[S1]&quot;." />
</function>
<function name="parse_element_for_mass" returnType="std::tuple&lt;double, int&gt;" private="true" doc="Determine the atomic mass of the element at the specified index of the chemical compound formula by parsing the formula." doc_return="Atomic mass. [kg/kmol]">
    <param name="compound" type="std::string" doc="Formula of a chemical compound, &quot;Fe3O4&quot;."/>
    <param name="index" type="int" doc="Index from which the formula should be parsed." />
</function>
<function name="parse_element_for_stoichiometry" returnType="std::tuple&lt;std::string, double, int&gt;" private="true" doc="Determine the stoichiometry coefficient of the element at the specified index of the formula by parsing the formula." doc_return="Stoichiometric coefficient.">
    <param name="compound" type="std::string" doc="Formula of a chemical compound, &quot;Fe3O4&quot;."/>
    <param name="index" type="int" doc="Index from which the formula should be parsed." />
</function>
<function name="parse_formula_for_elements" returnType="std::set&lt;std::string&gt;" private="true" doc="Determine the set of elements that occur in the specified formula." doc_return="Set of elements.">
    <param name="compound" type="std::string" doc="Formula of a chemical compound." />
</function>
<function name="parse_formula_for_mass" returnType="std::tuple&lt;double, int&gt;" private="true" doc="Determine the molar mass of the chemical compound by recursively parsing its formula from the specified index." doc_return="Molecular mass of the parsed portion of the formula.">
    <param name="compound" type="std::string" doc="Formula of a chemical compound." />
    <param name="index" type="int" doc="Index from which the formula should be parsed." />
</function>
<function name="parse_formula_for_stoichiometry" returnType="void" private="true" doc="Determine the stoichiometry of the formula by recursively parsing it from the specified index and storing the result in the specified dictionary.">
    <param name="compound" type="std::string" doc="Formula of a chemical compound." />
    <param name="index" type="int" doc="Index from which the formula should be parsed." />
    <param name="stoichiometry_dict" type="std::map&lt;std::string, double&gt;&amp;" doc="Stoichiometry dictionary." />
</function>
<function name="populate_element_dictionary" returnType="std::map&lt;std::string, Element&gt;" private="true" doc="Create all the elements of the periodic table." doc_return="element dictionary" />
<function name="amount" returnType="double" doc="Calculate the number of moles in the specified mass of a chemical compound." doc_return="Amount. [kmol]">
    <param name="compound" type="std::string" doc="Formula and phase of a compound, e.g. &quot;Fe2O3[S1]&quot;. The phase may be omitted."/>
    <param name="mass" type="double" doc="[kg]" />
</function>
<function name="mass" returnType="double" doc="Calculate the mass of the specified amount of a chemical compound." doc_return="[kg]">
    <param name="compound" type="std::string" doc="Formula and phase of a compound, e.g. &quot;Fe2O3[S1]&quot;. The phase may be omitted." />
    <param name="amount" type="double" doc="[kmol]" />
</function>
<function name="convert_compound" returnType="double" doc="Convert the specified mass of the source compound to the target using element as basis." doc_return="Mass of to_compound. [kg]">
    <param name="mass" type="double" doc="Mass of from_compound. [kg]" />
    <param name="source" type="std::string" doc="Formula and phase of the original compound, e.g. &quot;Fe2O3[S1]&quot;." />
    <param name="target" type="std::string" doc="Formula and phase of the target compound, e.g. &quot;Fe[S1]&quot;." />
    <param name="element" type="std::string" doc="Element to use as basis for the conversion, e.g. &quot;Fe&quot; or &quot;O&quot;." />
</function>
<function name="element_mass_fraction" returnType="double" doc="Determine the mass fraction of an element in a chemical compound." doc_return="Element mass fraction.">
    <param name="compound" type="std::string" doc="Formula of the chemical compound, &quot;FeCr2O4&quot;." />
    <param name="element" type="std::string" doc="Element, e.g. &quot;Cr&quot;." />
</function>
<function name="element_mass_fractions" returnType="std::vector&lt;double&gt;" doc="Determine the mass fractions of a list of elements in a chemical compound." doc_return="Mass fractions.">
    <param name="compound" type="std::string" doc="Formula and phase of a chemical compound, e.g. &quot;Fe2O3[S1]&quot;." />
    <param name="elements" type="std::vector&lt;std::string&gt;" doc="List of elements, [&quot;Si&quot;, &quot;O&quot;, &quot;Fe&quot;]." />
</function>
<function name="elements" returnType="std::vector&lt;std::string&gt;" doc="Determine the set of elements present in a list of chemical compounds.\\n\\nThe list of elements is sorted alphabetically." doc_return="">
    <param name="compounds" type="std::vector&lt;std::string&gt;" doc="List of elements." />
</function>
<function name="molar_mass" returnType="double" doc="Determine the molar mass of a chemical compound. The molar mass is usually the mass of one mole of the substance, but here it is the mass of 1000 moles, since the mass unit used in pmpy is kg." doc_return="Molar mass. [kg/kmol]">
    <param name="compound" type="std::string" default="" doc="Formula of a chemical compound, e.g. &quot;Fe2O3&quot;." />
</function>
<function name="stoichiometry_coefficient" returnType="double" doc="Determine the stoichiometry coefficient of an element in a chemical compound." doc_return="Stoichiometry coefficient.">
    <param name="compound" type="std::string" doc="Formula of a chemical compound, e.g. &quot;SiO2&quot;." />
    <param name="element" type="std::string" doc="Element, e.g. &quot;Si&quot;." />
</function>
<function name="stoichiometry_coefficients" returnType="std::vector&lt;double&gt;" doc="Determine the stoichiometry coefficients of the specified elements in the specified chemical compound." doc_return="List of stoichiometry coefficients.">
    <param name="compound" type="std::string" doc="Formula of a chemical compound, e.g. &quot;SiO2&quot;." />
    <param name="elements" type="std::vector&lt;std::string&gt;" doc="List of elements, e.g. [&quot;Si&quot;, &quot;O&quot;, &quot;C&quot;]." />
</function>
<xs:sequence>
    <xs:element name="Element" type="std::string, Element" minOccurs="0" maxOccurs="unbounded" dict="true" private="true" default="populate_element_dictionary()" />
    <xs:element name="Molar_mass" type="std::string, double" minOccurs="0" maxOccurs="unbounded" dict="true" private="true"/>
    <xs:element name="Stoichiometry" type="std::string, std::map&lt;std::string, double&gt;" minOccurs="0" maxOccurs="unbounded" dict="true" private="true"/>
</xs:sequence>

</xs:complexType>

</xs:schema>
